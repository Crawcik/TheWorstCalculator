<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".rs" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.Int32" name="MaxNumber" #>
<#@ parameter type="System.String" name="Operators" #>
<#
	string GetList() => string.Join(',', Operators.ToCharArray().Select(x=> $" {x} - {GetName(x)}"));

	string GetName(char type) => type switch
	{
		'a' => "Add",
		's' => "Subtract",
		'm' => "Multiple",
		'd' => "Divide",
		_ => throw new ArgumentException("Wrong argument has been given")
	};

	int GetNumber(char type, int a, int b) => type switch
	{
		'a' => a + b,
		's' => a - b,
		'm' => a * b,
		'd' => b == 0 ? 0 : a / b,
		_ => throw new ArgumentException("Wrong argument has been given")
	};
#>
use std::io::{self, Write};

fn main() {
    let mut input_text = String::new();
    println!("Max number: <#= MaxNumber #>");
    print!("First number: ");
    io::stdout().flush().unwrap();
    io::stdin().read_line(&mut input_text).unwrap();
    let a: u32 = input_text.trim().parse().expect("Invalid input!");
    input_text.clear();
    print!("Second number: ");
    io::stdout().flush().unwrap();
    io::stdin().read_line(&mut input_text).unwrap();
    let b: u32 = input_text.trim().parse().expect("Invalid input!");
    input_text.clear();
    println!("Do u wanna:<#= GetList() #>");
    io::stdin().read_line(&mut input_text).unwrap();
    let method: char = input_text.trim().parse().expect("Invalid input!");
    print!("Result: ");
<#
	char[] keys = Operators.ToCharArray();
	bool first = true;
	foreach(char key in keys)
	{
		if(first)
			this.WriteLine($"\tif method == \'{key}\' " + "{");
		else
			this.WriteLine("\t}" + $" else if method == \'{key}\' " + "{");
		first = false;
#>
	    <#= GetName(key).ToLower() #>(a, b);
<#
	}
#>
    } else {
        print!("Bad method selected!");
    }
}
<#
	foreach(char key in keys)
	{
#>

fn <#= GetName(key).ToLower() #>(a: u32, b: u32) {
	my $a = shift;
	my $b = shift;
<#
		for(int a = 0; a <= MaxNumber; a++)
		{
			for(int b = 0; b <= MaxNumber; b++)
			{
				if(a == 0 && b == 0)
					this.WriteLine($"\tif a == {a} && b == {b} " + "{");
				else
					this.WriteLine("\t}" + $" else if a == {a} && b == {b} " + "{");
#>
		print <#= GetNumber(key, a, b) #>;
<#
			}
		}
#>
	} else {
		print!("Unsupported number given!");
	}
}
<#
	}
#>